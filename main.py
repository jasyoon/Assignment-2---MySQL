import mysql.connector
#pip install mysql-connector-python

def connect_to_database():
    try:
        conn = mysql.connector.connect(
            host = 'localhost', #os.getenv('host')
            port = '3306',
            user = 'root',
            password = 'change-me',
            database = 'assignment2'
        )
        return conn
    except mysql.connector.Error as e:
        print(f"Error connecting to MySQL: {e}")
        return None

def list_out_of_stock_products(conn):
    try:
        cursor = conn.cursor()
        query = "SELECT ProductName FROM Products WHERE UnitsInStock = 0" # only want to show the product names so the output is not as cringe
        cursor.execute(query)
        results = cursor.fetchall()
        if not results:
            print(f"No products are out of stock")
        else:
            print(f"The following products are out of stock:")
            for product in results:
                print(product[0])   # did this so that the output is not as messy with parenthesis and quotes
    except mysql.connector.Error as e:
        print(f"Error listing out-of-stock products: {e}")


def list_total_orders_per_customer(conn):
    try:
        cursor = conn.cursor()
        query = "SELECT c.CustomerID,c.CustomerName, COUNT(o.OrderID) AS TotalOrders " \
                "FROM Customers c " \
                "LEFT JOIN Orders o ON c.CustomerID = o.CustomerID " \
                "GROUP BY c.CustomerID, c.CustomerName "
        cursor.execute(query) #needed the \ above because the query is on multiple lines for visibility
        results = cursor.fetchall()
        if not results:
            print(f"No orders found")
        else:
            print(f"Total number of orders placed by each customer:")
            for customer in results:
                print(f"Name: {customer[1]}, Total Orders: {customer[2]}")
    except mysql.connector.Error as e:
        print(f"Error finding total orders per customer: {e}")


def list_most_expensive_products_by_order(conn):
    #code for this method was provided in class
    try:
        cursor = conn.cursor()
        query = "SELECT o.OrderID, p.ProductID, p.ProductName, od.UnitPrice, od.Quantity " \
                "FROM Orders o " \
                "JOIN OrderDetails od ON o.OrderID = od.OrderID " \
                "JOIN Products p ON od.ProductID = p.ProductID " \
                "WHERE (o.OrderID, od.UnitPrice) IN ( " \
                "SELECT OrderID, MAX(UnitPrice) FROM OrderDetails GROUP BY OrderID) " \
                "ORDER BY o.OrderID"

        cursor.execute(query)
        results = cursor.fetchall()
        if not results:
            print(f"No orders found")
        else:
            print(f"List of most expensive products by order:")
            for products in results:
                print(f"OrderID: {products[0]}, ProductName: {products[2]}, UnitPrice: {products[3]}")
    except mysql.connector.Error as e:
        print(f"Error finding orders: {e}")

def list_products_never_ordered(conn):
    try:
        cursor = conn.cursor()
        query = "SELECT * FROM Products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderDetails)"
        cursor.execute(query)
        results = cursor.fetchall()
        if not results:
            print(f"All products have been ordered.")
        else:
            print(f"List of products that have never been ordered:")
            for product in results:
                print(f"ProductName: {product[1]}, UnitPrice: {product[4]}, UnitsInStock: {product[5]}") #only used these cuz they felt the most relevant
    except mysql.connector.Error as e:
        print(f"Error finding products never ordered: {e}")

def list_total_revenue_per_supplier(conn):
    try:
        cursor = conn.cursor()
        query = "SELECT s.SupplierID, s.SupplierName, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue " \
                "FROM Suppliers s " \
                "LEFT JOIN Products p ON s.SupplierID = p.SupplierID " \
                "LEFT JOIN OrderDetails od ON p.ProductID = od.ProductID " \
                "GROUP BY s.SupplierID, s.SupplierName"
        cursor.execute(query)
        results = cursor.fetchall()
        if not results:
            print(f"No revenue found")
        else:
            print(f"Total revenue generated by each supplier:")
            for supplier in results:
                print(f"Supplier ID: {supplier[0]}, Name: {supplier[1]}, Total Revenue: {supplier[2]}")
    except mysql.connector.Error as e:
        print(f"Error finding total revenue per supplier: {e}")

def add_new_order(conn, customer_id, order_date, ship_date, ship_address, ship_city, ship_postal_code, ship_country,
                  product_id, quantity, unit_price):
    try:
        if None in (customer_id, order_date, ship_date, ship_address, ship_city, ship_postal_code, ship_country,
                    product_id, quantity, unit_price):
            raise ValueError("Input parameters cannot be None")

        cursor = conn.cursor()
        cursor.callproc('AddNewOrder', (customer_id, order_date, ship_date, ship_address, ship_city, ship_postal_code,
                                         ship_country, product_id, quantity, unit_price))
        conn.commit()
        print("New order added successfully.")
    except ValueError as ve:
        print(f"Error adding a new order: {ve}")
    except mysql.connector.Error as e:
        print(f"Error adding a new order: {e}")

import mysql.connector

def update_stock_quantity(conn, product_id, quantity):
    try:
        # Input validation
        if None in (product_id, quantity):
            raise ValueError("Input parameters cannot be None")

        cursor = conn.cursor()
        cursor.callproc('UpdateStockQuantity', (product_id, quantity))
        conn.commit()
        print("Stock quantity updated successfully.")
    except ValueError as ve:
        print(f"Error updating stock quantity: {ve}")
    except mysql.connector.Error as e:
        print(f"Error updating stock quantity: {e}")

def print_menu():
    print("Welcome to the Eco Supplies Database! Input any of these options:")
    print("1. List out-of-stock products")
    print("2. List total orders per customer")
    print("3. List most expensive products by order")
    print("4. List products never ordered")
    print("5. List total revenue per supplier")
    print("6. Add a new order")
    print("7. Update stock quantity")
    print("0. Exit")

def main():
    conn = connect_to_database()
    if conn:
        choice = "-1" #I made this a string rather than an int to get around input validation for an int
        while choice != 0:
            print_menu()
            choice = input("Enter your choice (0-7): ")
            if choice == "1":
                list_out_of_stock_products(conn)
            elif choice == "2":
                list_total_orders_per_customer(conn)
            elif choice == "3":
                list_most_expensive_products_by_order(conn)
            elif choice == "4":
                list_products_never_ordered(conn)
            elif choice == "5":
                list_total_revenue_per_supplier(conn)
            elif choice == "6":
                customer_id = input("Enter Customer ID: ")
                order_date = input("Enter Order Date (YYYY-MM-DD): ")
                ship_date = input("Enter Ship Date (YYYY-MM-DD): ")
                ship_address = input("Enter Ship Address: ")
                ship_city = input("Enter Ship City: ")
                ship_postal_code = input("Enter Ship Postal Code: ")
                ship_country = input("Enter Ship Country: ")
                product_id = input("Enter Product ID: ")
                quantity = input("Enter Quantity: ")
                unit_price = input("Enter Unit Price: ")
                add_new_order(conn, customer_id, order_date, ship_date, ship_address, ship_city,
                              ship_postal_code, ship_country, product_id, quantity, unit_price)
            elif choice == "7":
                product_id = input("Enter Product ID: ")
                quantity = input("Enter amount to change quantity by (to subtract, input a negative number): ")
                update_stock_quantity(conn, product_id, quantity)
            elif choice == "0":
                break
            else:
                print("Invalid choice. Please enter a number between 0 and 7.")
        print("Exiting program...")
        conn.close()

if __name__ == "__main__":
    main()